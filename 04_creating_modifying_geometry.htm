<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Surpac Tcl/SCL Tutorial - Module 4</title>
    <style>
        body { font-family: sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 20px auto; padding: 0 20px; }
        h1, h2, h3 { color: #004488; }
        code { background-color: #f4f4f4; padding: 2px 6px; border-radius: 4px; font-family: "Courier New", Courier, monospace; }
        pre { background-color: #f4f4f4; border: 1px solid #ddd; border-left: 3px solid #004488; padding: 10px; white-space: pre-wrap; word-wrap: break-word; }
        .note { background-color: #e7f3fe; border-left: 6px solid #2196F3; padding: 10px; margin: 20px 0; }
    </style>
</head>
<body>

    <h1>Module 4: Creating and Modifying Geometry</h1>
    <p>In the previous module, you learned how to read and analyze data from existing Surpac files. Now, you will learn how to create new geometry from scratch and modify existing data, giving you the power to generate new designs, automate data cleaning, and create custom tools.</p>

    <hr>

    <h2>4.1 Creating New Geometry</h2>
    <p>
        Creating new geometry in SCL follows a logical, hierarchical process. You start by creating an empty container (a SWA object), then you create a string to put inside it, and finally you create points to add to the string.
    </p>
    <ol>
        <li><strong><a href="../../scl/createswa.htm" target="_blank"><code>SclCreateSwa</code></a>:</strong> Creates a new, empty SWA object in memory and returns a handle to it. This is your blank canvas.</li>
        <li><strong><a href="../../scl/createstring.htm" target="_blank"><code>SclCreateString</code></a>:</strong> Creates a new, empty string object with a specified string number.</li>
        <li><strong><a href="../../scl/createpoint.htm" target="_blank"><code>SclCreatePoint</code></a>:</strong> Creates a new point object with specified X, Y, and Z coordinates.</li>
        <li><strong><a href="../../scl/sclAdd.htm" target="_blank"><code>SclAdd</code></a>:</strong> This crucial command adds one object to another. For example, you use it to add a point object to a string object, and then add that string object to the main SWA file object.</li>
    </ol>
    <p>This process gives you precise control over the structure of the file you are building.</p>

    <hr>

    <h2>4.2 Modifying Existing Geometry</h2>
    <p>
        Modifying an existing object is often simpler than creating a new one. The most common modification is changing the coordinates or description fields of a point. The primary command for this is <a href="../../scl/setvaluebyname.htm" target="_blank"><code>SclSetValueByName</code></a>.
    </p>
    <p>To use it, you first need to get the handle to the specific point you want to change (as you learned in Module 3), and then you can set its `x`, `y`, `z`, or description field values.</p>
    <pre><code># Assume point_handle is a handle to a specific point

# Get the current Y coordinate
set current_y [SclGetValueByName $point_handle "y"]

# Calculate the new Y coordinate
set new_y [expr {$current_y + 10.0}]

# Set the point's Y coordinate to the new value
SclSetValueByName $point_handle "y" $new_y

SclMessage "INFO" "Point Y coordinate updated from $current_y to $new_y"</code></pre>

    <hr>

    <h2>4.3 Practical Example: Offset a String File</h2>
    <p>This script combines reading, creating, and modifying concepts. It will read an existing string file, create a brand new in-memory copy, and offset every point in the copy by a user-defined amount before saving it to a new file.</p>
    <p>Create a file named <code>offset_string.tcl</code>. You will also need an input file, for example, the <code>test_topo.str</code> file from the previous module.</p>

    <pre><code># Practical Example: Offset all points in a string file

# 1. Define input/output files and the offset distance
set input_file "pit_design_v1.str"
set output_file "pit_design_v2.str"
set y_offset 10.0

# 2. Open the source file for reading
set in_file_handle [SclSwaOpenFile $input_file]

# 3. Create a new, empty SWA object for our output
set out_file_handle [SclCreateSwa]

# 4. Get all string numbers from the source file
set string_list [SclGetStrings $in_file_handle]

# 5. Loop through each source string
foreach string_id $string_list {
    set in_string_handle [SclGetItem $in_file_handle "string" $string_id]
    
    # Create a corresponding new, empty string in our output SWA
    set out_string_handle [SclCreateString $string_id]

    set point_count [SclGetItem $in_string_handle "count"]

    # 6. Loop through each point in the source string
    for {set i 1} {$i <= $point_count} {incr i} {
        set in_point_handle [SclGetItem $in_string_handle "point" $i]

        # 7. Read the original coordinates
        set x [SclGetValueByName $in_point_handle "x"]
        set y [SclGetValueByName $in_point_handle "y"]
        set z [SclGetValueByName $in_point_handle "z"]

        # 8. Calculate the new Y coordinate
        set new_y [expr {$y + $y_offset}]

        # 9. Create a new point with the new coordinates
        set out_point_handle [SclCreatePoint [list $x $new_y $z]]

        # 10. Add the new point to our new string
        SclAdd $out_string_handle $out_point_handle
    }

    # 11. Add the completed new string to our new SWA file
    SclAdd $out_file_handle $out_string_handle
}

# 12. Save the new SWA object to a disk file
SclSwaSaveStringFile $out_file_handle $output_file

SclMessage "INFO" "Successfully created offset file: $output_file"

# 13. Clean up memory
SclDestroyHandle $in_file_handle
SclDestroyHandle $out_file_handle
</code></pre>

    <hr>

    <p><strong>Next Steps:</strong> You are now able to perform powerful data manipulation. In Module 5, we will move from processing raw data to visualizing it by drawing markers, lines, and text directly in the Surpac graphics viewport.</p>

</body>
</html>